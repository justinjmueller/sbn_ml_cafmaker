
//  WARNING:
//    This file was autogenerated by create_cpp_objects.py.
//    Do not edit by hand!
//    
//    The invocation that generated this file was:
//
//       create_cpp_objects.py -f /pnfs/icarus/scratch/users/mueller/ml_hdf5/mpvmpr/all_0_mlreco_ana_lite.h5 -o ./sbn_h5_classes -d events -cn Event -d interactions -cn Interaction -d truth_interactions -cn TruthInteraction -d particles -cn Particle -d truth_particles -cn TruthParticle -d run_info -cn RunInfo -ns dlp::types
//

#include "sbn_h5_classes.h"
#include "H5Cpp.h"

namespace dlp::types
{

  
  void Event::SyncVectors()
  {
  
  }
  
  
  void Interaction::SyncVectors()
  {
    match.reset(&match_handle);
    match_overlap.reset(&match_overlap_handle);
    particle_ids.reset(&particle_ids_handle);
  }
  
  
  void TruthInteraction::SyncVectors()
  {
    match.reset(&match_handle);
    match_overlap.reset(&match_overlap_handle);
    nu_position.reset(&nu_position_handle);
    particle_ids.reset(&particle_ids_handle);
    truth_particle_counts.reset(&truth_particle_counts_handle);
    truth_primary_counts.reset(&truth_primary_counts_handle);
  }
  
  
  void Particle::SyncVectors()
  {
    fragment_ids.reset(&fragment_ids_handle);
    index.reset(&index_handle);
    match.reset(&match_handle);
    match_overlap.reset(&match_overlap_handle);
  }
  
  
  void TruthParticle::SyncVectors()
  {
    ancestor_position.reset(&ancestor_position_handle);
    children_counts.reset(&children_counts_handle);
    first_step.reset(&first_step_handle);
    fragment_ids.reset(&fragment_ids_handle);
    index.reset(&index_handle);
    last_step.reset(&last_step_handle);
    match.reset(&match_handle);
    match_overlap.reset(&match_overlap_handle);
    parent_position.reset(&parent_position_handle);
    position.reset(&position_handle);
    sed_index.reset(&sed_index_handle);
    truth_index.reset(&truth_index_handle);
  }
  
  
  void RunInfo::SyncVectors()
  {
  
  }
  
  
  template <>
  H5::CompType BuildCompType<Event>()
  {
    H5::CompType ctype(sizeof(Event));
  
    ctype.insertMember("index", HOFFSET(Event, index), H5::PredType::STD_REF_DSETREG);
    ctype.insertMember("meta", HOFFSET(Event, meta), H5::PredType::STD_REF_DSETREG);
    ctype.insertMember("run_info", HOFFSET(Event, run_info), H5::PredType::STD_REF_DSETREG);
    ctype.insertMember("truth_particles", HOFFSET(Event, truth_particles), H5::PredType::STD_REF_DSETREG);
    ctype.insertMember("interactions", HOFFSET(Event, interactions), H5::PredType::STD_REF_DSETREG);
    ctype.insertMember("particles", HOFFSET(Event, particles), H5::PredType::STD_REF_DSETREG);
    ctype.insertMember("truth_interactions", HOFFSET(Event, truth_interactions), H5::PredType::STD_REF_DSETREG);
  
    return ctype;
  }
  
  
  template <>
  H5::CompType BuildCompType<Interaction>()
  {
    H5::CompType ctype(sizeof(Interaction));
  
    ctype.insertMember("coffset", HOFFSET(Interaction, coffset), H5::PredType::IEEE_F64LE);
    ctype.insertMember("crthit_id", HOFFSET(Interaction, crthit_id), H5::PredType::STD_I64LE);
    ctype.insertMember("crthit_matched", HOFFSET(Interaction, crthit_matched), H5::PredType::STD_U8LE);
    ctype.insertMember("crthit_matched_particle_id", HOFFSET(Interaction, crthit_matched_particle_id), H5::PredType::STD_I64LE);
    ctype.insertMember("flash_hypothesis", HOFFSET(Interaction, flash_hypothesis), H5::PredType::IEEE_F64LE);
    ctype.insertMember("flash_id", HOFFSET(Interaction, flash_id), H5::PredType::STD_I64LE);
    ctype.insertMember("flash_time", HOFFSET(Interaction, flash_time), H5::PredType::IEEE_F64LE);
    ctype.insertMember("flash_total_pE", HOFFSET(Interaction, flash_total_pE), H5::PredType::IEEE_F64LE);
    ctype.insertMember("fmatched", HOFFSET(Interaction, fmatched), H5::PredType::STD_U8LE);
    ctype.insertMember("id", HOFFSET(Interaction, id), H5::PredType::STD_I64LE);
    ctype.insertMember("image_id", HOFFSET(Interaction, image_id), H5::PredType::STD_I64LE);
    ctype.insertMember("is_ccrosser", HOFFSET(Interaction, is_ccrosser), H5::PredType::STD_U8LE);
    ctype.insertMember("is_contained", HOFFSET(Interaction, is_contained), H5::PredType::STD_U8LE);
    ctype.insertMember("is_fiducial", HOFFSET(Interaction, is_fiducial), H5::PredType::STD_U8LE);
    ctype.insertMember("is_neutrino", HOFFSET(Interaction, is_neutrino), H5::PredType::STD_U8LE);
    ctype.insertMember("is_principal_match", HOFFSET(Interaction, is_principal_match), H5::PredType::STD_U8LE);
    ctype.insertMember("match", HOFFSET(Interaction, match_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("match_overlap", HOFFSET(Interaction, match_overlap_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("matched", HOFFSET(Interaction, matched), H5::PredType::STD_U8LE);
    ctype.insertMember("nu_id", HOFFSET(Interaction, nu_id), H5::PredType::STD_I64LE);
    ctype.insertMember("num_particles", HOFFSET(Interaction, num_particles), H5::PredType::STD_I64LE);
    ctype.insertMember("num_primaries", HOFFSET(Interaction, num_primaries), H5::PredType::STD_I64LE);
    ctype.insertMember("particle_counts", HOFFSET(Interaction, particle_counts), H5::ArrayType(H5::PredType::STD_I64LE, 1, &std::array<hsize_t, 1>{7}[0]));
    ctype.insertMember("particle_ids", HOFFSET(Interaction, particle_ids_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("primary_counts", HOFFSET(Interaction, primary_counts), H5::ArrayType(H5::PredType::STD_I64LE, 1, &std::array<hsize_t, 1>{7}[0]));
    ctype.insertMember("size", HOFFSET(Interaction, size), H5::PredType::STD_I64LE);
    
    H5::StrType topology_strType(H5::PredType::C_S1, H5T_VARIABLE);
    topology_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("topology", HOFFSET(Interaction, topology), topology_strType);
    
    
    H5::StrType units_strType(H5::PredType::C_S1, H5T_VARIABLE);
    units_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("units", HOFFSET(Interaction, units), units_strType);
    
    ctype.insertMember("vertex", HOFFSET(Interaction, vertex), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    
    H5::StrType vertex_mode_strType(H5::PredType::C_S1, H5T_VARIABLE);
    vertex_mode_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("vertex_mode", HOFFSET(Interaction, vertex_mode), vertex_mode_strType);
    
    ctype.insertMember("volume_id", HOFFSET(Interaction, volume_id), H5::PredType::STD_I64LE);
  
    return ctype;
  }
  
  
  template <>
  H5::CompType BuildCompType<TruthInteraction>()
  {
    H5::CompType ctype(sizeof(TruthInteraction));
  
    ctype.insertMember("coffset", HOFFSET(TruthInteraction, coffset), H5::PredType::IEEE_F64LE);
    ctype.insertMember("crthit_id", HOFFSET(TruthInteraction, crthit_id), H5::PredType::STD_I64LE);
    ctype.insertMember("crthit_matched", HOFFSET(TruthInteraction, crthit_matched), H5::PredType::STD_U8LE);
    ctype.insertMember("crthit_matched_particle_id", HOFFSET(TruthInteraction, crthit_matched_particle_id), H5::PredType::STD_I64LE);
    ctype.insertMember("flash_hypothesis", HOFFSET(TruthInteraction, flash_hypothesis), H5::PredType::IEEE_F64LE);
    ctype.insertMember("flash_id", HOFFSET(TruthInteraction, flash_id), H5::PredType::STD_I64LE);
    ctype.insertMember("flash_time", HOFFSET(TruthInteraction, flash_time), H5::PredType::IEEE_F64LE);
    ctype.insertMember("flash_total_pE", HOFFSET(TruthInteraction, flash_total_pE), H5::PredType::IEEE_F64LE);
    ctype.insertMember("fmatched", HOFFSET(TruthInteraction, fmatched), H5::PredType::STD_U8LE);
    ctype.insertMember("id", HOFFSET(TruthInteraction, id), H5::PredType::STD_I64LE);
    ctype.insertMember("image_id", HOFFSET(TruthInteraction, image_id), H5::PredType::STD_I64LE);
    ctype.insertMember("is_ccrosser", HOFFSET(TruthInteraction, is_ccrosser), H5::PredType::STD_U8LE);
    ctype.insertMember("is_contained", HOFFSET(TruthInteraction, is_contained), H5::PredType::STD_U8LE);
    ctype.insertMember("is_fiducial", HOFFSET(TruthInteraction, is_fiducial), H5::PredType::STD_U8LE);
    ctype.insertMember("is_neutrino", HOFFSET(TruthInteraction, is_neutrino), H5::PredType::STD_U8LE);
    ctype.insertMember("is_principal_match", HOFFSET(TruthInteraction, is_principal_match), H5::PredType::STD_U8LE);
    ctype.insertMember("match", HOFFSET(TruthInteraction, match_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("match_overlap", HOFFSET(TruthInteraction, match_overlap_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("matched", HOFFSET(TruthInteraction, matched), H5::PredType::STD_U8LE);
    ctype.insertMember("nu_bjorken_x", HOFFSET(TruthInteraction, nu_bjorken_x), H5::PredType::IEEE_F64LE);
    
    H5::StrType nu_creation_process_strType(H5::PredType::C_S1, H5T_VARIABLE);
    nu_creation_process_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("nu_creation_process", HOFFSET(TruthInteraction, nu_creation_process), nu_creation_process_strType);
    
    
    H5::EnumType nu_current_type_enumtype(H5::PredType::STD_I64LE);
    int64_t nu_current_type_enum_val;
      nu_current_type_enum_val = 0; nu_current_type_enumtype.insert("CC", &nu_current_type_enum_val);
      nu_current_type_enum_val = 1; nu_current_type_enumtype.insert("NC", &nu_current_type_enum_val);
      nu_current_type_enum_val = -1; nu_current_type_enumtype.insert("UnknownCurrent", &nu_current_type_enum_val);
    ctype.insertMember("nu_current_type", HOFFSET(TruthInteraction, nu_current_type), nu_current_type_enumtype);
    
    ctype.insertMember("nu_distance_travel", HOFFSET(TruthInteraction, nu_distance_travel), H5::PredType::IEEE_F64LE);
    ctype.insertMember("nu_energy_deposit", HOFFSET(TruthInteraction, nu_energy_deposit), H5::PredType::IEEE_F64LE);
    ctype.insertMember("nu_energy_init", HOFFSET(TruthInteraction, nu_energy_init), H5::PredType::IEEE_F64LE);
    ctype.insertMember("nu_hadronic_invariant_mass", HOFFSET(TruthInteraction, nu_hadronic_invariant_mass), H5::PredType::IEEE_F64LE);
    ctype.insertMember("nu_id", HOFFSET(TruthInteraction, nu_id), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_inelasticity", HOFFSET(TruthInteraction, nu_inelasticity), H5::PredType::IEEE_F64LE);
    
    H5::EnumType nu_interaction_mode_enumtype(H5::PredType::STD_I64LE);
    int64_t nu_interaction_mode_enum_val;
      nu_interaction_mode_enum_val = 9; nu_interaction_mode_enumtype.insert("AMNuGamma", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1097; nu_interaction_mode_enumtype.insert("CCCOH", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1091; nu_interaction_mode_enumtype.insert("CCDIS", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1001; nu_interaction_mode_enumtype.insert("CCQE", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1095; nu_interaction_mode_enumtype.insert("CCQEHyperon", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 3; nu_interaction_mode_enumtype.insert("Coh", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 4; nu_interaction_mode_enumtype.insert("CohElastic", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 2; nu_interaction_mode_enumtype.insert("DIS", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 11; nu_interaction_mode_enumtype.insert("Diffractive", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 12; nu_interaction_mode_enumtype.insert("EM", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 5; nu_interaction_mode_enumtype.insert("ElectronScattering", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 8; nu_interaction_mode_enumtype.insert("GlashowResonance", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 6; nu_interaction_mode_enumtype.insert("IMDAnnihilation", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 7; nu_interaction_mode_enumtype.insert("InverseBetaDecay", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1099; nu_interaction_mode_enumtype.insert("InverseMuDecay", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 10; nu_interaction_mode_enumtype.insert("MEC", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1100; nu_interaction_mode_enumtype.insert("MEC2p2h", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1096; nu_interaction_mode_enumtype.insert("NCCOH", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1092; nu_interaction_mode_enumtype.insert("NCDIS", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1002; nu_interaction_mode_enumtype.insert("NCQE", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1098; nu_interaction_mode_enumtype.insert("NuElectronElastic", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1000; nu_interaction_mode_enumtype.insert("NuanceOffset", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1; nu_interaction_mode_enumtype.insert("QE", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1028; nu_interaction_mode_enumtype.insert("ResCCNuBarDelta0PiMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1032; nu_interaction_mode_enumtype.insert("ResCCNuBarDeltaMinusPiPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1076; nu_interaction_mode_enumtype.insert("ResCCNuBarKaon0Lambda0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1070; nu_interaction_mode_enumtype.insert("ResCCNuBarNeutronEta", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1086; nu_interaction_mode_enumtype.insert("ResCCNuBarNeutronPi0Pi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1010; nu_interaction_mode_enumtype.insert("ResCCNuBarNeutronPiMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1085; nu_interaction_mode_enumtype.insert("ResCCNuBarNeutronPiPlusPiMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1048; nu_interaction_mode_enumtype.insert("ResCCNuBarNeutronRho0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1046; nu_interaction_mode_enumtype.insert("ResCCNuBarNeutronRhoMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1011; nu_interaction_mode_enumtype.insert("ResCCNuBarProtonPi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1090; nu_interaction_mode_enumtype.insert("ResCCNuBarProtonPi0Pi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1012; nu_interaction_mode_enumtype.insert("ResCCNuBarProtonPiMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1062; nu_interaction_mode_enumtype.insert("ResCCNuBarSigma0Kaon0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1060; nu_interaction_mode_enumtype.insert("ResCCNuBarSigmaMinusKaon0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1021; nu_interaction_mode_enumtype.insert("ResCCNuDelta2PlusPiMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1017; nu_interaction_mode_enumtype.insert("ResCCNuDeltaPlusPiPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1073; nu_interaction_mode_enumtype.insert("ResCCNuKaonPlusLambda0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1004; nu_interaction_mode_enumtype.insert("ResCCNuNeutronPi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1005; nu_interaction_mode_enumtype.insert("ResCCNuNeutronPiPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1041; nu_interaction_mode_enumtype.insert("ResCCNuNeutronRhoPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1067; nu_interaction_mode_enumtype.insert("ResCCNuProtonEta", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1080; nu_interaction_mode_enumtype.insert("ResCCNuProtonPi0Pi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1003; nu_interaction_mode_enumtype.insert("ResCCNuProtonPiPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1079; nu_interaction_mode_enumtype.insert("ResCCNuProtonPiPlusPiMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1039; nu_interaction_mode_enumtype.insert("ResCCNuProtonRhoPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1055; nu_interaction_mode_enumtype.insert("ResCCNuSigmaPlusKaon0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1053; nu_interaction_mode_enumtype.insert("ResCCNuSigmaPlusKaonPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1015; nu_interaction_mode_enumtype.insert("ResNCNuBarNeutronPi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1016; nu_interaction_mode_enumtype.insert("ResNCNuBarNeutronPiMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1013; nu_interaction_mode_enumtype.insert("ResNCNuBarProtonPi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1014; nu_interaction_mode_enumtype.insert("ResNCNuBarProtonPiPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1008; nu_interaction_mode_enumtype.insert("ResNCNuNeutronPi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1009; nu_interaction_mode_enumtype.insert("ResNCNuNeutronPiMinus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1006; nu_interaction_mode_enumtype.insert("ResNCNuProtonPi0", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1007; nu_interaction_mode_enumtype.insert("ResNCNuProtonPiPlus", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1093; nu_interaction_mode_enumtype.insert("UnUsed1", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 1094; nu_interaction_mode_enumtype.insert("UnUsed2", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = -1; nu_interaction_mode_enumtype.insert("UnknownInteraction", &nu_interaction_mode_enum_val);
      nu_interaction_mode_enum_val = 13; nu_interaction_mode_enumtype.insert("WeakMix", &nu_interaction_mode_enum_val);
    ctype.insertMember("nu_interaction_mode", HOFFSET(TruthInteraction, nu_interaction_mode), nu_interaction_mode_enumtype);
    
    
    H5::EnumType nu_interaction_type_enumtype(H5::PredType::STD_I64LE);
    int64_t nu_interaction_type_enum_val;
      nu_interaction_type_enum_val = 9; nu_interaction_type_enumtype.insert("AMNuGamma", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1097; nu_interaction_type_enumtype.insert("CCCOH", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1091; nu_interaction_type_enumtype.insert("CCDIS", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1001; nu_interaction_type_enumtype.insert("CCQE", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1095; nu_interaction_type_enumtype.insert("CCQEHyperon", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 3; nu_interaction_type_enumtype.insert("Coh", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 4; nu_interaction_type_enumtype.insert("CohElastic", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 2; nu_interaction_type_enumtype.insert("DIS", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 11; nu_interaction_type_enumtype.insert("Diffractive", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 12; nu_interaction_type_enumtype.insert("EM", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 5; nu_interaction_type_enumtype.insert("ElectronScattering", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 8; nu_interaction_type_enumtype.insert("GlashowResonance", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 6; nu_interaction_type_enumtype.insert("IMDAnnihilation", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 7; nu_interaction_type_enumtype.insert("InverseBetaDecay", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1099; nu_interaction_type_enumtype.insert("InverseMuDecay", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 10; nu_interaction_type_enumtype.insert("MEC", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1100; nu_interaction_type_enumtype.insert("MEC2p2h", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1096; nu_interaction_type_enumtype.insert("NCCOH", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1092; nu_interaction_type_enumtype.insert("NCDIS", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1002; nu_interaction_type_enumtype.insert("NCQE", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1098; nu_interaction_type_enumtype.insert("NuElectronElastic", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1000; nu_interaction_type_enumtype.insert("NuanceOffset", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1; nu_interaction_type_enumtype.insert("QE", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1028; nu_interaction_type_enumtype.insert("ResCCNuBarDelta0PiMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1032; nu_interaction_type_enumtype.insert("ResCCNuBarDeltaMinusPiPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1076; nu_interaction_type_enumtype.insert("ResCCNuBarKaon0Lambda0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1070; nu_interaction_type_enumtype.insert("ResCCNuBarNeutronEta", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1086; nu_interaction_type_enumtype.insert("ResCCNuBarNeutronPi0Pi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1010; nu_interaction_type_enumtype.insert("ResCCNuBarNeutronPiMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1085; nu_interaction_type_enumtype.insert("ResCCNuBarNeutronPiPlusPiMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1048; nu_interaction_type_enumtype.insert("ResCCNuBarNeutronRho0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1046; nu_interaction_type_enumtype.insert("ResCCNuBarNeutronRhoMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1011; nu_interaction_type_enumtype.insert("ResCCNuBarProtonPi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1090; nu_interaction_type_enumtype.insert("ResCCNuBarProtonPi0Pi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1012; nu_interaction_type_enumtype.insert("ResCCNuBarProtonPiMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1062; nu_interaction_type_enumtype.insert("ResCCNuBarSigma0Kaon0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1060; nu_interaction_type_enumtype.insert("ResCCNuBarSigmaMinusKaon0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1021; nu_interaction_type_enumtype.insert("ResCCNuDelta2PlusPiMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1017; nu_interaction_type_enumtype.insert("ResCCNuDeltaPlusPiPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1073; nu_interaction_type_enumtype.insert("ResCCNuKaonPlusLambda0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1004; nu_interaction_type_enumtype.insert("ResCCNuNeutronPi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1005; nu_interaction_type_enumtype.insert("ResCCNuNeutronPiPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1041; nu_interaction_type_enumtype.insert("ResCCNuNeutronRhoPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1067; nu_interaction_type_enumtype.insert("ResCCNuProtonEta", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1080; nu_interaction_type_enumtype.insert("ResCCNuProtonPi0Pi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1003; nu_interaction_type_enumtype.insert("ResCCNuProtonPiPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1079; nu_interaction_type_enumtype.insert("ResCCNuProtonPiPlusPiMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1039; nu_interaction_type_enumtype.insert("ResCCNuProtonRhoPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1055; nu_interaction_type_enumtype.insert("ResCCNuSigmaPlusKaon0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1053; nu_interaction_type_enumtype.insert("ResCCNuSigmaPlusKaonPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1015; nu_interaction_type_enumtype.insert("ResNCNuBarNeutronPi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1016; nu_interaction_type_enumtype.insert("ResNCNuBarNeutronPiMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1013; nu_interaction_type_enumtype.insert("ResNCNuBarProtonPi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1014; nu_interaction_type_enumtype.insert("ResNCNuBarProtonPiPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1008; nu_interaction_type_enumtype.insert("ResNCNuNeutronPi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1009; nu_interaction_type_enumtype.insert("ResNCNuNeutronPiMinus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1006; nu_interaction_type_enumtype.insert("ResNCNuProtonPi0", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1007; nu_interaction_type_enumtype.insert("ResNCNuProtonPiPlus", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1093; nu_interaction_type_enumtype.insert("UnUsed1", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 1094; nu_interaction_type_enumtype.insert("UnUsed2", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = -1; nu_interaction_type_enumtype.insert("UnknownInteraction", &nu_interaction_type_enum_val);
      nu_interaction_type_enum_val = 13; nu_interaction_type_enumtype.insert("WeakMix", &nu_interaction_type_enum_val);
    ctype.insertMember("nu_interaction_type", HOFFSET(TruthInteraction, nu_interaction_type), nu_interaction_type_enumtype);
    
    ctype.insertMember("nu_lepton_track_id", HOFFSET(TruthInteraction, nu_lepton_track_id), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_mcst_index", HOFFSET(TruthInteraction, nu_mcst_index), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_mct_index", HOFFSET(TruthInteraction, nu_mct_index), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_momentum_transfer", HOFFSET(TruthInteraction, nu_momentum_transfer), H5::PredType::IEEE_F64LE);
    ctype.insertMember("nu_nucleon", HOFFSET(TruthInteraction, nu_nucleon), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_num_voxels", HOFFSET(TruthInteraction, nu_num_voxels), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_p", HOFFSET(TruthInteraction, nu_p), H5::PredType::IEEE_F64LE);
    ctype.insertMember("nu_pdg_code", HOFFSET(TruthInteraction, nu_pdg_code), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_position", HOFFSET(TruthInteraction, nu_position_handle), H5::VarLenType(H5::PredType::IEEE_F64LE));
    ctype.insertMember("nu_quark", HOFFSET(TruthInteraction, nu_quark), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_t", HOFFSET(TruthInteraction, nu_t), H5::PredType::IEEE_F64LE);
    ctype.insertMember("nu_target", HOFFSET(TruthInteraction, nu_target), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_theta", HOFFSET(TruthInteraction, nu_theta), H5::PredType::IEEE_F64LE);
    ctype.insertMember("nu_track_id", HOFFSET(TruthInteraction, nu_track_id), H5::PredType::STD_I64LE);
    ctype.insertMember("nu_truth_id", HOFFSET(TruthInteraction, nu_truth_id), H5::PredType::STD_I64LE);
    ctype.insertMember("num_particles", HOFFSET(TruthInteraction, num_particles), H5::PredType::STD_I64LE);
    ctype.insertMember("num_primaries", HOFFSET(TruthInteraction, num_primaries), H5::PredType::STD_I64LE);
    ctype.insertMember("particle_counts", HOFFSET(TruthInteraction, particle_counts), H5::ArrayType(H5::PredType::STD_I64LE, 1, &std::array<hsize_t, 1>{7}[0]));
    ctype.insertMember("particle_ids", HOFFSET(TruthInteraction, particle_ids_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("primary_counts", HOFFSET(TruthInteraction, primary_counts), H5::ArrayType(H5::PredType::STD_I64LE, 1, &std::array<hsize_t, 1>{7}[0]));
    ctype.insertMember("size", HOFFSET(TruthInteraction, size), H5::PredType::STD_I64LE);
    
    H5::StrType topology_strType(H5::PredType::C_S1, H5T_VARIABLE);
    topology_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("topology", HOFFSET(TruthInteraction, topology), topology_strType);
    
    ctype.insertMember("truth_id", HOFFSET(TruthInteraction, truth_id), H5::PredType::STD_I64LE);
    ctype.insertMember("truth_particle_counts", HOFFSET(TruthInteraction, truth_particle_counts_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("truth_primary_counts", HOFFSET(TruthInteraction, truth_primary_counts_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    
    H5::StrType truth_topology_strType(H5::PredType::C_S1, H5T_VARIABLE);
    truth_topology_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("truth_topology", HOFFSET(TruthInteraction, truth_topology), truth_topology_strType);
    
    ctype.insertMember("truth_vertex", HOFFSET(TruthInteraction, truth_vertex), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    
    H5::StrType units_strType(H5::PredType::C_S1, H5T_VARIABLE);
    units_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("units", HOFFSET(TruthInteraction, units), units_strType);
    
    ctype.insertMember("vertex", HOFFSET(TruthInteraction, vertex), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    
    H5::StrType vertex_mode_strType(H5::PredType::C_S1, H5T_VARIABLE);
    vertex_mode_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("vertex_mode", HOFFSET(TruthInteraction, vertex_mode), vertex_mode_strType);
    
    ctype.insertMember("volume_id", HOFFSET(TruthInteraction, volume_id), H5::PredType::STD_I64LE);
  
    return ctype;
  }
  
  
  template <>
  H5::CompType BuildCompType<Particle>()
  {
    H5::CompType ctype(sizeof(Particle));
  
    ctype.insertMember("calo_ke", HOFFSET(Particle, calo_ke), H5::PredType::IEEE_F64LE);
    ctype.insertMember("coffset", HOFFSET(Particle, coffset), H5::PredType::IEEE_F64LE);
    ctype.insertMember("csda_ke", HOFFSET(Particle, csda_ke), H5::PredType::IEEE_F64LE);
    ctype.insertMember("depositions_sum", HOFFSET(Particle, depositions_sum), H5::PredType::IEEE_F64LE);
    ctype.insertMember("end_dir", HOFFSET(Particle, end_dir), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("end_point", HOFFSET(Particle, end_point), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("fragment_ids", HOFFSET(Particle, fragment_ids_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("id", HOFFSET(Particle, id), H5::PredType::STD_I64LE);
    ctype.insertMember("image_id", HOFFSET(Particle, image_id), H5::PredType::STD_I64LE);
    ctype.insertMember("index", HOFFSET(Particle, index_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("interaction_id", HOFFSET(Particle, interaction_id), H5::PredType::STD_I64LE);
    ctype.insertMember("is_ccrosser", HOFFSET(Particle, is_ccrosser), H5::PredType::STD_U8LE);
    ctype.insertMember("is_contained", HOFFSET(Particle, is_contained), H5::PredType::STD_U8LE);
    ctype.insertMember("is_primary", HOFFSET(Particle, is_primary), H5::PredType::STD_U8LE);
    ctype.insertMember("is_principal_match", HOFFSET(Particle, is_principal_match), H5::PredType::STD_U8LE);
    ctype.insertMember("is_valid", HOFFSET(Particle, is_valid), H5::PredType::STD_U8LE);
    ctype.insertMember("ke", HOFFSET(Particle, ke), H5::PredType::IEEE_F64LE);
    ctype.insertMember("length", HOFFSET(Particle, length), H5::PredType::IEEE_F64LE);
    ctype.insertMember("match", HOFFSET(Particle, match_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("match_overlap", HOFFSET(Particle, match_overlap_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("matched", HOFFSET(Particle, matched), H5::PredType::STD_U8LE);
    ctype.insertMember("mcs_ke", HOFFSET(Particle, mcs_ke), H5::PredType::IEEE_F64LE);
    ctype.insertMember("momentum", HOFFSET(Particle, momentum), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("nu_id", HOFFSET(Particle, nu_id), H5::PredType::STD_I64LE);
    ctype.insertMember("num_fragments", HOFFSET(Particle, num_fragments), H5::PredType::STD_I64LE);
    ctype.insertMember("pdg_code", HOFFSET(Particle, pdg_code), H5::PredType::STD_I64LE);
    
    H5::EnumType pid_enumtype(H5::PredType::STD_I64LE);
    int64_t pid_enum_val;
      pid_enum_val = 1; pid_enumtype.insert("Electron", &pid_enum_val);
      pid_enum_val = 5; pid_enumtype.insert("Kaon", &pid_enum_val);
      pid_enum_val = 2; pid_enumtype.insert("Muon", &pid_enum_val);
      pid_enum_val = 0; pid_enumtype.insert("Photon", &pid_enum_val);
      pid_enum_val = 3; pid_enumtype.insert("Pion", &pid_enum_val);
      pid_enum_val = 4; pid_enumtype.insert("Proton", &pid_enum_val);
    ctype.insertMember("pid", HOFFSET(Particle, pid), pid_enumtype);
    
    ctype.insertMember("pid_scores", HOFFSET(Particle, pid_scores), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{5}[0]));
    ctype.insertMember("primary_scores", HOFFSET(Particle, primary_scores), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{2}[0]));
    
    H5::EnumType semantic_type_enumtype(H5::PredType::STD_I64LE);
    int64_t semantic_type_enum_val;
      semantic_type_enum_val = 3; semantic_type_enumtype.insert("Delta", &semantic_type_enum_val);
      semantic_type_enum_val = 5; semantic_type_enumtype.insert("Ghost", &semantic_type_enum_val);
      semantic_type_enum_val = 4; semantic_type_enumtype.insert("Low Energy", &semantic_type_enum_val);
      semantic_type_enum_val = 2; semantic_type_enumtype.insert("Michel", &semantic_type_enum_val);
      semantic_type_enum_val = 0; semantic_type_enumtype.insert("Shower", &semantic_type_enum_val);
      semantic_type_enum_val = 1; semantic_type_enumtype.insert("Track", &semantic_type_enum_val);
      semantic_type_enum_val = 6; semantic_type_enumtype.insert("Unknown", &semantic_type_enum_val);
    ctype.insertMember("semantic_type", HOFFSET(Particle, semantic_type), semantic_type_enumtype);
    
    ctype.insertMember("size", HOFFSET(Particle, size), H5::PredType::STD_I64LE);
    ctype.insertMember("start_dir", HOFFSET(Particle, start_dir), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("start_point", HOFFSET(Particle, start_point), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    
    H5::StrType units_strType(H5::PredType::C_S1, H5T_VARIABLE);
    units_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("units", HOFFSET(Particle, units), units_strType);
    
    ctype.insertMember("volume_id", HOFFSET(Particle, volume_id), H5::PredType::STD_I64LE);
  
    return ctype;
  }
  
  
  template <>
  H5::CompType BuildCompType<TruthParticle>()
  {
    H5::CompType ctype(sizeof(TruthParticle));
  
    
    H5::StrType ancestor_creation_process_strType(H5::PredType::C_S1, H5T_VARIABLE);
    ancestor_creation_process_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("ancestor_creation_process", HOFFSET(TruthParticle, ancestor_creation_process), ancestor_creation_process_strType);
    
    ctype.insertMember("ancestor_pdg_code", HOFFSET(TruthParticle, ancestor_pdg_code), H5::PredType::STD_I64LE);
    ctype.insertMember("ancestor_position", HOFFSET(TruthParticle, ancestor_position_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("ancestor_t", HOFFSET(TruthParticle, ancestor_t), H5::PredType::IEEE_F64LE);
    ctype.insertMember("ancestor_track_id", HOFFSET(TruthParticle, ancestor_track_id), H5::PredType::STD_I64LE);
    ctype.insertMember("calo_ke", HOFFSET(TruthParticle, calo_ke), H5::PredType::IEEE_F64LE);
    ctype.insertMember("calo_ke_tng", HOFFSET(TruthParticle, calo_ke_tng), H5::PredType::IEEE_F64LE);
    ctype.insertMember("children_counts", HOFFSET(TruthParticle, children_counts_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("coffset", HOFFSET(TruthParticle, coffset), H5::PredType::IEEE_F64LE);
    
    H5::StrType creation_process_strType(H5::PredType::C_S1, H5T_VARIABLE);
    creation_process_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("creation_process", HOFFSET(TruthParticle, creation_process), creation_process_strType);
    
    ctype.insertMember("csda_ke", HOFFSET(TruthParticle, csda_ke), H5::PredType::IEEE_F64LE);
    ctype.insertMember("csda_ke_tng", HOFFSET(TruthParticle, csda_ke_tng), H5::PredType::IEEE_F64LE);
    ctype.insertMember("depositions_sum", HOFFSET(TruthParticle, depositions_sum), H5::PredType::IEEE_F64LE);
    ctype.insertMember("distance_travel", HOFFSET(TruthParticle, distance_travel), H5::PredType::IEEE_F64LE);
    ctype.insertMember("end_dir", HOFFSET(TruthParticle, end_dir), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("end_point", HOFFSET(TruthParticle, end_point), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("end_position", HOFFSET(TruthParticle, end_position), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("energy_deposit", HOFFSET(TruthParticle, energy_deposit), H5::PredType::IEEE_F64LE);
    ctype.insertMember("energy_init", HOFFSET(TruthParticle, energy_init), H5::PredType::IEEE_F64LE);
    ctype.insertMember("first_step", HOFFSET(TruthParticle, first_step_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("fragment_ids", HOFFSET(TruthParticle, fragment_ids_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("group_id", HOFFSET(TruthParticle, group_id), H5::PredType::STD_I64LE);
    ctype.insertMember("id", HOFFSET(TruthParticle, id), H5::PredType::STD_I64LE);
    ctype.insertMember("image_id", HOFFSET(TruthParticle, image_id), H5::PredType::STD_I64LE);
    ctype.insertMember("index", HOFFSET(TruthParticle, index_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("interaction_id", HOFFSET(TruthParticle, interaction_id), H5::PredType::STD_I64LE);
    ctype.insertMember("is_ccrosser", HOFFSET(TruthParticle, is_ccrosser), H5::PredType::STD_U8LE);
    ctype.insertMember("is_contained", HOFFSET(TruthParticle, is_contained), H5::PredType::STD_U8LE);
    ctype.insertMember("is_primary", HOFFSET(TruthParticle, is_primary), H5::PredType::STD_U8LE);
    ctype.insertMember("is_principal_match", HOFFSET(TruthParticle, is_principal_match), H5::PredType::STD_U8LE);
    ctype.insertMember("is_valid", HOFFSET(TruthParticle, is_valid), H5::PredType::STD_U8LE);
    ctype.insertMember("ke", HOFFSET(TruthParticle, ke), H5::PredType::IEEE_F64LE);
    ctype.insertMember("last_step", HOFFSET(TruthParticle, last_step_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("length", HOFFSET(TruthParticle, length), H5::PredType::IEEE_F64LE);
    ctype.insertMember("length_tng", HOFFSET(TruthParticle, length_tng), H5::PredType::IEEE_F64LE);
    ctype.insertMember("match", HOFFSET(TruthParticle, match_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("match_overlap", HOFFSET(TruthParticle, match_overlap_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("matched", HOFFSET(TruthParticle, matched), H5::PredType::STD_U8LE);
    ctype.insertMember("mcs_ke", HOFFSET(TruthParticle, mcs_ke), H5::PredType::IEEE_F64LE);
    ctype.insertMember("mcs_ke_tng", HOFFSET(TruthParticle, mcs_ke_tng), H5::PredType::IEEE_F64LE);
    ctype.insertMember("mcst_index", HOFFSET(TruthParticle, mcst_index), H5::PredType::STD_I64LE);
    ctype.insertMember("mct_index", HOFFSET(TruthParticle, mct_index), H5::PredType::STD_I64LE);
    ctype.insertMember("momentum", HOFFSET(TruthParticle, momentum), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("nu_id", HOFFSET(TruthParticle, nu_id), H5::PredType::STD_I64LE);
    ctype.insertMember("num_fragments", HOFFSET(TruthParticle, num_fragments), H5::PredType::STD_I64LE);
    ctype.insertMember("num_voxels", HOFFSET(TruthParticle, num_voxels), H5::PredType::STD_I64LE);
    ctype.insertMember("p", HOFFSET(TruthParticle, p), H5::PredType::IEEE_F64LE);
    
    H5::StrType parent_creation_process_strType(H5::PredType::C_S1, H5T_VARIABLE);
    parent_creation_process_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("parent_creation_process", HOFFSET(TruthParticle, parent_creation_process), parent_creation_process_strType);
    
    ctype.insertMember("parent_id", HOFFSET(TruthParticle, parent_id), H5::PredType::STD_I64LE);
    ctype.insertMember("parent_pdg_code", HOFFSET(TruthParticle, parent_pdg_code), H5::PredType::STD_I64LE);
    ctype.insertMember("parent_position", HOFFSET(TruthParticle, parent_position_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("parent_t", HOFFSET(TruthParticle, parent_t), H5::PredType::IEEE_F64LE);
    ctype.insertMember("parent_track_id", HOFFSET(TruthParticle, parent_track_id), H5::PredType::STD_I64LE);
    ctype.insertMember("pdg_code", HOFFSET(TruthParticle, pdg_code), H5::PredType::STD_I64LE);
    
    H5::EnumType pid_enumtype(H5::PredType::STD_I64LE);
    int64_t pid_enum_val;
      pid_enum_val = 1; pid_enumtype.insert("Electron", &pid_enum_val);
      pid_enum_val = 5; pid_enumtype.insert("Kaon", &pid_enum_val);
      pid_enum_val = 2; pid_enumtype.insert("Muon", &pid_enum_val);
      pid_enum_val = 0; pid_enumtype.insert("Photon", &pid_enum_val);
      pid_enum_val = 3; pid_enumtype.insert("Pion", &pid_enum_val);
      pid_enum_val = 4; pid_enumtype.insert("Proton", &pid_enum_val);
    ctype.insertMember("pid", HOFFSET(TruthParticle, pid), pid_enumtype);
    
    ctype.insertMember("position", HOFFSET(TruthParticle, position_handle), H5::VarLenType(H5::PredType::IEEE_F32LE));
    ctype.insertMember("sed_depositions_MeV_sum", HOFFSET(TruthParticle, sed_depositions_MeV_sum), H5::PredType::IEEE_F64LE);
    ctype.insertMember("sed_index", HOFFSET(TruthParticle, sed_index_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("sed_size", HOFFSET(TruthParticle, sed_size), H5::PredType::STD_I64LE);
    
    H5::EnumType semantic_type_enumtype(H5::PredType::STD_I64LE);
    int64_t semantic_type_enum_val;
      semantic_type_enum_val = 3; semantic_type_enumtype.insert("Delta", &semantic_type_enum_val);
      semantic_type_enum_val = 5; semantic_type_enumtype.insert("Ghost", &semantic_type_enum_val);
      semantic_type_enum_val = 4; semantic_type_enumtype.insert("Low Energy", &semantic_type_enum_val);
      semantic_type_enum_val = 2; semantic_type_enumtype.insert("Michel", &semantic_type_enum_val);
      semantic_type_enum_val = 0; semantic_type_enumtype.insert("Shower", &semantic_type_enum_val);
      semantic_type_enum_val = 1; semantic_type_enumtype.insert("Track", &semantic_type_enum_val);
      semantic_type_enum_val = 6; semantic_type_enumtype.insert("Unknown", &semantic_type_enum_val);
    ctype.insertMember("semantic_type", HOFFSET(TruthParticle, semantic_type), semantic_type_enumtype);
    
    ctype.insertMember("shape", HOFFSET(TruthParticle, shape), H5::PredType::STD_I64LE);
    ctype.insertMember("size", HOFFSET(TruthParticle, size), H5::PredType::STD_I64LE);
    ctype.insertMember("start_dir", HOFFSET(TruthParticle, start_dir), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("start_point", HOFFSET(TruthParticle, start_point), H5::ArrayType(H5::PredType::IEEE_F32LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("t", HOFFSET(TruthParticle, t), H5::PredType::IEEE_F64LE);
    ctype.insertMember("track_id", HOFFSET(TruthParticle, track_id), H5::PredType::STD_I64LE);
    ctype.insertMember("truth_depositions_MeV_sum", HOFFSET(TruthParticle, truth_depositions_MeV_sum), H5::PredType::IEEE_F64LE);
    ctype.insertMember("truth_depositions_sum", HOFFSET(TruthParticle, truth_depositions_sum), H5::PredType::IEEE_F64LE);
    ctype.insertMember("truth_index", HOFFSET(TruthParticle, truth_index_handle), H5::VarLenType(H5::PredType::STD_I64LE));
    ctype.insertMember("truth_momentum", HOFFSET(TruthParticle, truth_momentum), H5::ArrayType(H5::PredType::IEEE_F64LE, 1, &std::array<hsize_t, 1>{3}[0]));
    ctype.insertMember("truth_size", HOFFSET(TruthParticle, truth_size), H5::PredType::STD_I64LE);
    ctype.insertMember("truth_start_dir", HOFFSET(TruthParticle, truth_start_dir), H5::ArrayType(H5::PredType::IEEE_F64LE, 1, &std::array<hsize_t, 1>{3}[0]));
    
    H5::StrType units_strType(H5::PredType::C_S1, H5T_VARIABLE);
    units_strType.setCset(H5T_CSET_UTF8);
    ctype.insertMember("units", HOFFSET(TruthParticle, units), units_strType);
    
    ctype.insertMember("volume_id", HOFFSET(TruthParticle, volume_id), H5::PredType::STD_I64LE);
  
    return ctype;
  }
  
  
  template <>
  H5::CompType BuildCompType<RunInfo>()
  {
    H5::CompType ctype(sizeof(RunInfo));
  
    ctype.insertMember("run", HOFFSET(RunInfo, run), H5::PredType::STD_I64LE);
    ctype.insertMember("subrun", HOFFSET(RunInfo, subrun), H5::PredType::STD_I64LE);
    ctype.insertMember("event", HOFFSET(RunInfo, event), H5::PredType::STD_I64LE);
  
    return ctype;
  }
  

}
